[{"D:\\webprojects\\react\\image_gallery\\src\\index.js":"1","D:\\webprojects\\react\\image_gallery\\src\\App.js":"2"},{"size":193,"mtime":1609125655361,"results":"3","hashOfConfig":"4"},{"size":2734,"mtime":1609182605313,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"18kuhbo",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"D:\\webprojects\\react\\image_gallery\\src\\index.js",[],["12","13"],"D:\\webprojects\\react\\image_gallery\\src\\App.js",["14"],"import React, { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport './App.css'\r\nimport axios from 'axios'\r\n\r\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY\r\n\r\nexport default function App() {\r\n  const [images, setImages] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [query, setQuery] = useState('')\r\n\r\n  useEffect(() => {\r\n    getPhotos()\r\n    // eslint-disable-next-line\r\n  }, [page])\r\n\r\n  function getPhotos() {\r\n    let apiUrl = `https://api.unsplash.com/photos?`\r\n    if (query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`\r\n    apiUrl += `&page=${page}`\r\n    apiUrl += `&client_id=${accessKey}`\r\n\r\n    fetch(apiUrl)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const imagesFromApi = data.results ?? data\r\n\r\n        // if page is 1, then we need a whole new array of images\r\n        if (page === 1) {\r\n          setImages(imagesFromApi)\r\n          return\r\n        }\r\n\r\n        // if page > 1, then we are adding for our infinite scroll\r\n        setImages((images) => [...images, ...imagesFromApi])\r\n      })\r\n  }\r\n\r\n  function searchPhotos(e) {\r\n    e.preventDefault()\r\n    setPage(1)\r\n    getPhotos()\r\n  }\r\n\r\n  // Try to rewrite useState to add next page\r\n  /*  const fetchData = async () => {\r\n    const result = await axios(\r\n      `https://api.unsplash.com/photos/?client_id=${accessKey}`\r\n    )\r\n    const data = result.data\r\n    setImages(data)\r\n  } */\r\n  // return an error if there is no access key\r\n  if (!accessKey) {\r\n    return (\r\n      <a href=\"https://unsplash.com/developers\" className=\"error\">\r\n        Required: Get Your Unsplash API Key\r\n      </a>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Infinity Image Gallery!</h1>\r\n\r\n      <form onSubmit={searchPhotos}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search Image...\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        />\r\n        <button>Search</button>\r\n      </form>\r\n      <InfiniteScroll\r\n        dataLength={images.length} //This is important field to render the next data\r\n        next={() => setPage((page) => page + 1)}\r\n        hasMore={true}\r\n        loader={<h4>Loading...</h4>}\r\n      >\r\n        <div className=\"image-grid\">\r\n          {images.map((image, index) => (\r\n            <a\r\n              className=\"image\"\r\n              key={index}\r\n              href={image.links.html}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <img src={image.urls.regular} alt={image.alt_description} />\r\n            </a>\r\n          ))}\r\n        </div>\r\n      </InfiniteScroll>\r\n    </div>\r\n  )\r\n}\r\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":4,"column":8,"nodeType":"21","messageId":"22","endLine":4,"endColumn":13},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]